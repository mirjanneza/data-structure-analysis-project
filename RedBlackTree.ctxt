#BlueJ class context
comment0.params=
comment0.target=RedBlackTree()
comment0.text=\n\ Construct\ the\ tree.\n
comment1.params=item\ t
comment1.target=int\ compare(java.lang.Comparable,\ RedBlackTree.RedBlackNode)
comment1.text=\n\ Compare\ item\ and\ t.element,\ using\ compareTo,\ with\n\ caveat\ that\ if\ t\ is\ header,\ then\ item\ is\ always\ larger.\n\ This\ routine\ is\ called\ if\ is\ possible\ that\ t\ is\ header.\n\ If\ it\ is\ not\ possible\ for\ t\ to\ be\ header,\ use\ compareTo\ directly.\n
comment10.params=
comment10.target=boolean\ isEmpty()
comment10.text=\n\ Test\ if\ the\ tree\ is\ logically\ empty.\n\ @return\ true\ if\ empty,\ false\ otherwise.\n
comment11.params=item
comment11.target=void\ handleReorient(java.lang.Comparable)
comment11.text=\n\ Internal\ routine\ that\ is\ called\ during\ an\ insertion\n\ if\ a\ node\ has\ two\ red\ children.\ Performs\ flip\ and\ rotations.\n\ @param\ item\ the\ item\ being\ inserted.\n
comment12.params=item\ parent
comment12.target=RedBlackTree.RedBlackNode\ rotate(java.lang.Comparable,\ RedBlackTree.RedBlackNode)
comment12.text=\n\ Internal\ routine\ that\ performs\ a\ single\ or\ double\ rotation.\n\ Because\ the\ result\ is\ attached\ to\ the\ parent,\ there\ are\ four\ cases.\n\ Called\ by\ handleReorient.\n\ @param\ item\ the\ item\ in\ handleReorient.\n\ @param\ parent\ the\ parent\ of\ the\ root\ of\ the\ rotated\ subtree.\n\ @return\ the\ root\ of\ the\ rotated\ subtree.\n
comment13.params=k2
comment13.target=RedBlackTree.RedBlackNode\ rotateWithLeftChild(RedBlackTree.RedBlackNode)
comment13.text=\n\ Rotate\ binary\ tree\ node\ with\ left\ child.\n
comment14.params=k1
comment14.target=RedBlackTree.RedBlackNode\ rotateWithRightChild(RedBlackTree.RedBlackNode)
comment14.text=\n\ Rotate\ binary\ tree\ node\ with\ right\ child.\n
comment15.params=k
comment15.target=java.lang.Comparable\ findKth(int)
comment15.text=\n\ Find\ the\ kth\ smallest\ item\ in\ the\ tree.\n\ @param\ k\ the\ desired\ rank\ (1\ is\ the\ smallest\ item).\n\ @return\ the\ kth\ smallest\ item\ in\ the\ tree.\n\ @throws\ IllegalArgumentException\ if\ k\ is\ less\n\ \ \ \ \ than\ 1\ or\ more\ than\ the\ size\ of\ the\ subtree.\n
comment16.params=k\ t
comment16.target=java.lang.Comparable\ findKth(int,\ RedBlackTree.RedBlackNode)
comment16.text=\n\ Internal\ method\ to\ find\ kth\ smallest\ item\ in\ a\ subtree.\n\ @param\ k\ the\ desired\ rank\ (1\ is\ the\ smallest\ item).\n\ @return\ the\ node\ containing\ the\ kth\ smallest\ item\ in\ the\ subtree.\n\ @throws\ IllegalArgumentException\ if\ k\ is\ less\n\ \ \ \ \ than\ 1\ or\ more\ than\ the\ size\ of\ the\ subtree.\n
comment17.params=
comment17.target=int\ size()
comment17.text=\n\ A\ method\ that\ returns\ the\ size\ of\ the\ tree\n
comment2.params=item
comment2.target=void\ insert(java.lang.Comparable)
comment2.text=\n\ Insert\ into\ the\ tree.\n\ @param\ item\ the\ item\ to\ insert.\n\ @throws\ DuplicateItemException\ if\ item\ is\ already\ present.\n
comment3.params=x
comment3.target=void\ remove(java.lang.Comparable)
comment3.text=\n\ Remove\ from\ the\ tree.\n\ @param\ x\ the\ item\ to\ remove.\n\ @throws\ UnsupportedOperationException\ if\ called.\n
comment4.params=
comment4.target=java.lang.Comparable\ findMin()
comment4.text=\n\ Find\ the\ smallest\ item\ \ the\ tree.\n\ @return\ the\ smallest\ item\ or\ null\ if\ empty.\n
comment5.params=
comment5.target=java.lang.Comparable\ findMax()
comment5.text=\n\ Find\ the\ largest\ item\ in\ the\ tree.\n\ @return\ the\ largest\ item\ or\ null\ if\ empty.\n
comment6.params=x
comment6.target=java.lang.Comparable\ find(java.lang.Comparable)
comment6.text=\n\ Find\ an\ item\ in\ the\ tree.\ It\ increases\ the\ size\ of\ \n\ each\ node\ it\ encounters\n\ @param\ x\ the\ item\ to\ search\ for.\n\ @return\ the\ matching\ item\ or\ null\ if\ not\ found.\n
comment7.params=
comment7.target=void\ makeEmpty()
comment7.text=\n\ Make\ the\ tree\ logically\ empty.\n
comment8.params=
comment8.target=void\ printTree()
comment8.text=\n\ Print\ all\ items.\n
comment9.params=t
comment9.target=void\ printTree(RedBlackTree.RedBlackNode)
comment9.text=\n\ Internal\ method\ to\ print\ a\ subtree\ in\ sorted\ order.\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\n
numComments=18
